name: update-test-models
on: 
  workflow_dispatch:

jobs:
  update-user-example-models:
    runs-on: ubuntu-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:

      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: install libcurl
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev

      - name: setup R  
        uses: r-lib/actions/setup-r@v2
      
      - name: install remotes
        run: Rscript -e 'install.packages("remotes")'

      - name: install r4ss
        run: Rscript -e 'remotes::install_github("r4ss/r4ss")'
      
      - name: install SSutils
        run: Rscript -e 'remotes::install_github("r4ss/SSutils")'
      
      - name: install purrr
        run: Rscript -e 'install.packages("purrr")'
        
      - name: Get the latest SS3 executable
        run:  wget -O ss https://github.com/nmfs-stock-synthesis/stock-synthesis/releases/latest/download/ss_linux
          
      - name: move ss to path
        run: |
          echo "ss" >> $GITHUB_PATH

      - name: run models
        run: |
          update_ref_files <- function(new_mod_path, ss_examples_folder = file.path(getwd(), "models")) {
            mod_name <- basename(new_mod_path)
            git_mod_path <- file.path(ss_examples_folder, mod_name)
            # list model files that need to be moved
            files_to_move <- c("ss.par", "ss_summary.sso", "warning.sso")
            # copy model files from new_mod_path folder to the git_mod_path folder,
            results_of_move <- lapply(files_to_move,
                                        function(x, new_mod_path, git_mod_path) {
                file.remove(file.path(git_mod_path, x))
                file.copy(from = file.path(new_mod_path, x),
                        to = file.path(git_mod_path, x), 
                        overwrite = FALSE) 
                #to make sure worked:
                worked <- file.exists(file.path(git_mod_path, x))
            }, new_mod_path = new_mod_path, git_mod_path = git_mod_path)
            if(all(unlist(results_of_move) == TRUE)) {
                files_replaced <- TRUE
            } else {
                files_replaced <- FALSE
            }
            files_replaced
            }
          
          dirs_test <- list.dirs(recursive = FALSE)
          mod_dir_name <- dirs_test[grepl("model", dirs_test)]
          mod_dir_name <- gsub(".*\\./", "", mod_dir_name)
          mod_dirs <- list.dirs(dirs_test[grepl("model", dirs_test)], recursive = FALSE)

          new_mod_dir_name <- "new_models"

          r4ss::populate_multiple_folders(outerdir.old = mod_dir_name, 
                                outerdir.new = new_mod_dir_name,
                                exe.file = NULL, verbose = FALSE)

          new_mod_dirs <- list.dirs(new_mod_dir_name, recursive = FALSE)

          # use the parallel version to speed up model runs 
          model_runs <- SSutils::run_SS_models_parallel(dirvec = new_mod_dirs,
                                          model = "ss", exe_in_path = TRUE,
                                          extras = "-stopph 0",
                                          parallel = TRUE, verbose = TRUE)
          
          new_mod_runs_folder <- file.path(new_mod_dir_name)
          new_mod_path_list <- list.dirs(new_mod_runs_folder, recursive = FALSE,
                                        full.names = TRUE)
          run_result <- lapply(new_mod_path_list, update_ref_files)
          run_result

          r4ss::populate_multiple_folders(outerdir.old = new_mod_dir_name, 
                                outerdir.new = mod_dir_name,
                                exe.file = NULL, verbose = FALSE, 
                                use_ss_new = TRUE, overwrite = TRUE)

          unlink(new_mod_dir_name, recursive = TRUE)

        shell: Rscript {0}
      
      - name: Remove ss from path
        run: rm ss

      - name: Setup git user
        uses: fregante/setup-git-user@v1
      
      - name: Commit
        run: |
          git add .
          git commit -m "update test model files to new ss3 release"
        
      - name: Create Pull Request 
        uses: peter-evans/create-pull-request@v3
        with:
          commit_message: Update model files to new ss exe
          branch: add-update-workflow-new
          title: 'Update model files to new ss exe'

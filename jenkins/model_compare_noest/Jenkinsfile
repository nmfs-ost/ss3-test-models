pipeline {
    agent { dockerfile {
          dir 'jenkins/model_compare_noest'
        }
    }
    stages {
		stage('clean up from previous run') {
		    steps {
			    sh label: 'remove an old dir (force in case does not exist)', script: 'rm -rf ss_example_files'
			    sh label: 'remove an old file (force in case does not exist)', script: 'rm -f run_models.sh'
		        sh label: 'remove an old dir (force in case does not exist)', script: 'rm -rf ss_bin'
				sh label: 'remove old files (force in case does not exist)', script: 'rm -f models.zip'
				sh label: 'remove old dir (force in case does not exist)', script: 'rm -rf model_runs'
				sh label: 'remove old files (force in case does not exist)', script: 'rm -f run_from_par.R'
				sh label: 'remove old files (force in case does not exist)', script: 'rm -f ss'
				sh label: 'remove old files (force in case does not exist)', script: 'rm -f models/ss'
				sh label: 'remove old files (force in case does not exist)', script: 'rm -f run_compare_noest.R'
			    sh label: 'remove an old dir (force in case does not exist)', script: 'rm -rf run_R'
				// sh label: 'view folders/files', script: 'ls .'
				sh label: 'view model files', script: 'ls models/Simple'
			}
		}
	    stage('move R scripts') {
		    steps{
			    sh label: 'copy over run from par', script: 'cp jenkins/model_compare_noest/run_from_par.R  run_from_par.R'
				sh label: 'copy over compare', script: 'cp jenkins/model_compare_noest/run_compare_noest.R  run_compare_noest.R'
			}
		}
        stage('Copy ss.gz artifact from previous stage') {
            steps {
              copyArtifacts filter: 'ss.gz', fingerprintArtifacts: true, projectName: 'stock-synthesis-build', selector: lastSuccessful()
			}
        }
		stage('copy model files to a new directory') {
		    steps{
			    sh label: 'Move ss executable', script: 'mv models model_runs'
			}
		}
        stage('Unpack ss.gz artifact') {
            steps {
                sh label: 'Unzip ss', script: 'gunzip ss.gz'
                sh label: 'Make ss executable', script: 'chmod a+rwx ss'
				sh label: 'Move ss executable', script: 'mv ss model_runs/ss'
                // sh label: 'Get dir listing', script: 'ls -alh *'
            }
        }
		stage('Run ss without estimation or hessian on models') {
            steps {   
				sh label: 'run models', script: 'Rscript run_from_par.R'
            }
        }
		stage('Run comparison') {
		    steps {
			    sh label: 'create run_R directory', script: 'mkdir run_R'
			    sh label: 'run compare script', script: 'Rscript run_compare_noest.R'
			}
		}
	    stage('Determine results of test') {
		    steps{
			    sh label: 'run R code', script: 'Rscript jenkins/shared/check_failed.R'
			}
		}
    }
    post {
	    always {
		        sh label: 'get rid of ss exe', script: 'rm -f model_runs/ss'
				sh label: 'get rid of ss log', script: 'rm -f model_runs/ss.log'
                sh label: 'Zip models folder', script: 'zip -r models.zip model_runs'
                archiveArtifacts 'models.zip, run_R/test_failed.csv, run_R/all_changes.csv, run_R/all_results.csv'
		}
        failure {
            mail bcc: '', body: 'Stock Synthesis build failed.', cc: '', from: '', replyTo: '', subject: 'stock-synthesis-noest: Jenkins Build Failure', to: 'kathryn.doering@noaa.gov'
        }
        changed {
            script {
                if (currentBuild.currentResult == 'SUCCESS') { // Other values: SUCCESS, UNSTABLE
                    // Send an email only if the build status has changed from red to green
                   mail bcc: '', body: 'Stock Synthesis build now passing!', cc: '', from: '', replyTo: '', subject: 'stock-synthesis-noest: Jenkins Build Passing Again', to: 'kathryn.doering@noaa.gov'
                }
            }
        }
    }
}